# -*- coding: utf-8 -*-
"""lambda_funtion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L4Ono1fA3OTeH7YNq05Al2b3ZXFFpJoN

https://pythonacademy.com.br/blog/funcoes-lambda-no-python#:~:text=Fun%C3%A7%C3%B5es%20lambda%20s%C3%A3o%20uma%20ferramenta,em%20outro%20lugar%20do%20c%C3%B3digo.
"""

def fib2(n): # return Fibonacci series up to n
  result = []
  a, b = 0, 1
  while a < n:
    result.append(a)
    a, b = b, a + b
  return result

f100 = fib2(50000)
f100

soma = lambda x, y: x * y
print(soma(15, 3))

"""### função Map

Suponha que você tenha uma lista de números e que lhe pedissem para somar 5 a todos os valores da lista.

A forma mais comum seria utilizar um loop for, assim:
"""

lista = [1,2,3,4,5]
resultado = []

for item in lista:
  resultado.append(item + 5)

resultado

def soma_5(numero):
  return numero + 5

lista = [1,2,3,4,5]
resultado_1 = list(map(soma_5, lista))

resultado_1

# A função map com múltiplos iteráveis
from math import pow

numeros = [1,2,3]
expoentes = [4,5,6,7]

resultado = list(map(pow, numeros, expoentes))

resultado

"""## Exercício 1

"""

# Dada uma lista de números inteiros, use a função map para criar uma nova lista contendo o dobro de cada número.

def dobrar(numero):
  return numero * 2

lista = [1,2,3,4,5]
resultado = list(map(dobrar,lista))
resultado

numeros = [1,2,3,4,5]
quadrados = list(map(lambda x: x ** 2, numeros))
print(quadrados)

# Dada uma lista de strings em letras minúsculas, use a função map para criar uma nova lista onde todas as strings estejam em maiúsculas.

strings = ['apple', 'banana', 'cherry', 'date']
maiúsculas = list(map(str.upper, strings))
print(maiúsculas)

# Dada uma lista de números representando temperaturas em graus Celsius, use a função map para converter as temperaturas para graus Fahrenheit utilizando a fórmula F = C * 9/5 + 32.

temperatura_celsius = [-40, 25, 30, 15, 10]
temperatura_fahrenheit = list(map(lambda c: c*9/5 + 32, temperatura_celsius))
print(temperatura_fahrenheit)

# Dada uma lista de strings contendo números como "123", "456", etc., use a função map para converter essas strings em números inteiros.
strings_numeros = ['123', '456','789', '101']
numeros_inteiros = list(map(int, strings_numeros))
print(numeros_inteiros)

# Dada uma lista de palavras, use a função map para encontrar o comprimento de cada palavra e armazenar os comprimentos em uma nova lista.
palavras = ['gato', 'cachorro', 'elefante', 'pássaro']
comprimentos = list(map(len, palavras))
print(comprimentos)

# Dada uma lista de números inteiros, use a função map para encontrar a raiz quadrada de cada número e armazená-las em uma nova lista. Use a biblioteca math para calcular as raízes quadradas.

import math

numeros_inteiros = [16, 25, 9, 36, 49]
raizes_quadradas = list(map( math.sqrt, numeros_inteiros))
print(raizes_quadradas)

# Dada uma lista de strings contendo nomes de pessoas no formato "Primeiro Último", use a função map para criar uma nova lista contendo apenas os primeiros nomes.

nomes_completos = ['João Silva', 'Maria Santos', 'Pedro Alves', 'Ana Oliveira']
primeiros_nomes = list(map(lambda nome: nome.split()[0], nomes_completos))

# O método Python split é uma das funções disponíveis em Python utilizada para a manipulação de strings. Na prática, ele permite dividir o conteúdo da variável de acordo com as condições especificadas em cada parâmetro da função ou com os valores predefinidos por padrão.

print(primeiros_nomes)

# Dada uma lista de dicionários contendo informações de produtos, use a função map para calcular o preço final de cada produto após aplicar um desconto de 10% em todos eles. Cada dicionário tem chaves 'produto' e 'preco'.

produtos = [{'produto': 'Maçã', 'preco': 2.50},
            {'produto': 'Banana', 'preco': 1.75},
            {'produto': 'Laranja', 'preco': 3.00}]

def aplicar_desconto(produto):
  produto['preco']*= 0.9
  return produto

produtos_com_desconto = list(map(aplicar_desconto, produtos))
print(produtos_com_desconto)

# Dada uma lista de tuplas representando coordenadas (x, y) de pontos em um plano, use a função map para calcular a distância euclidiana de cada ponto à origem (0, 0).

import math

pontos = [(3, 4), (0, 0), (5, 12), (-2, 8)]

def distancia_origem(ponto):
  x, y = ponto
  return math.sqrt(x**2 + y **2)

distancias = list(map(distancia_origem, pontos))
print(distancias)

# Dada uma lista de dicionários contendo informações sobre estudantes, incluindo nome e lista de notas, use a função map para calcular a média de notas de cada estudante e adicione essa média como uma chave 'media' em cada dicionário.

estudantes = [{'nome': 'Ana', 'notas': [8, 9, 7]},
              {'nome': 'João', 'notas': [6, 5, 7]},
              {'nome': 'Maria', 'notas': [9, 8, 9]}]

def calcular_media(notas):
  return sum(notas)/ len(notas)

def adicionar_media(estudante):
  estudante['media'] = calcular_media(estudante['notas'])
  return estudantes

estudantes_com_media = list(map(adicionar_media, estudantes))
print(estudantes_com_media)

"""## A função filter

### A função filter do Python serve para filtrar elementos de iteráveis que satisfaçam determinadas condições.

Essas condições são calculadas através de uma função que deve retornar True ou False para determinado argumento de entrada.

A abordagem mais comum, assim como a função map, seria a utilização de loops para iterar sobre os elementos verificando elemento a elemento se a condição foi satisfeita ou não.

Contudo, com a função filter é possível fazer isso sem ter que se preocupar com as estruturas de repetição for ou while!
"""

# Usando for e if
def numeros_positivos(numeros):
    numeros_positivos = []

    for num in numeros:
        # Condição de filtragem
        if num > 0:
            numeros_positivos.append(num)

    return numeros_positivos

print(numeros_positivos([-2, -1, 0, 1, 2]))

# Usando a função filter

numeros = [-2, -1, 0, 1, 2]

def verifica_numero_positivo(numero):
    return numero > 0

print(list(filter(verifica_numero_positivo, numeros)))

lista = [1,2,3,4,5]

resultado = list(map(lambda x: x+5, lista))
resultado

numeros = [-2,-1,0,1,2]

numeros_positivos = list(filter(lambda x: x > 0, numeros))
numeros_positivos

"""## Exercícios sobre função filter"""

# Dada uma lista de números inteiros, use a função filter e uma função lambda para filtrar os números pares.

numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

numeros_pares = list(filter(lambda x: x % 2 == 0, numeros))
numeros_pares

# Dada uma lista de palavras, use a função filter e uma função lambda para filtrar as palavras que possuem mais de 5 letras.

palavras = ['apple', 'banana', 'cherry', 'date', 'grape']

palavras_longas = list(filter(lambda x: len(x) > 5, palavras))
palavras_longas

# Dada uma lista de números inteiros, use a função filter e uma função lambda para filtrar os números primos.

def is_prime(n):
  if n <= 1:
    return False
  for i in range(2, int(n ** 0.5) + 1):
    if n % i == 0:
      return False
  return True

numeros = [2,3,4,5,6,7,8,9,10,11]
numeros_primos = list(filter(lambda x: is_prime(x), numeros))
numeros_primos

# Dada uma lista de strings, use a função filter e uma função lambda para filtrar as strings que começam com a letra 'A'.

palavras = ['apple', 'banana', 'avocado', 'cherry', 'apricot']
palavras_com_a = list(filter( lambda x: x.startswith('a') or x.startswith('A'), palavras))
palavras_com_a

# Dada uma lista de dicionários representando alunos com suas notas, use a função filter e uma função lambda para filtrar os alunos que tiveram média acima de 7.

alunos = [{'nome': 'Ana', 'notas': [8, 9, 7]},
          {'nome': 'João', 'notas': [6, 5, 7]},
          {'nome': 'Maria', 'notas': [9, 8, 9]}]

alunos_aprovados = list(filter(lambda x: sum(x['notas'])/len(x['notas']) > 7, alunos))
alunos_aprovados

# Dada uma lista de números inteiros, use a função filter e uma função lambda para filtrar os números que são palíndromos.

def is_palindrome(n):
  return str(n) == str(n)[::-1]

numeros = [121, 123, 1331, 454]
numeros_palindromos = list(filter(lambda x: is_palindrome(x), numeros))
numeros_palindromos

# Dada uma lista de strings, use a função filter e uma função lambda para filtrar as strings que são anagramas de uma palavra específica.

def is_anagram(s1, s2):
  return sorted(s1) == sorted(s2) # A função sorted organizar letras de forma crescente.

palavra_referencia = 'listen'
palavras = ['enlist', 'silent', 'hello', 'stone']
anagramas = list(filter(lambda x: is_anagram(x, palavra_referencia), palavras))
anagramas

# Dada uma lista de números inteiros, use a função filter e uma função lambda para filtrar os números que são divisíveis pela soma de seus dígitos.

def is_divisible_by_digit_sum(n):
  digit_sum = sum(int(digit) for digit in str(n))
  return n % digit_sum == 0

numeros = [12, 15, 22, 45, 101]
numeros_divisiveis = list(filter(lambda x: is_divisible_by_digit_sum(x), numeros))
numeros_divisiveis

# Dada uma lista de strings, use a função filter e uma função lambda para filtrar as strings que são pangramas (contêm todas as letras do alfabeto).

import string

def is_pangram(s):
  alphabet = set(string.ascii_lowercase)
  return set(s.lower()) >= alphabet

frases = ['The quick brown fox jumps over the lazy dog', 'Hello world', 'Pack my box with five dozen liquor jugs']
pangramas = list(filter(lambda x: is_pangram(x), frases))
pangramas

# Dada uma lista de números inteiros, use a função filter e uma função lambda para filtrar os números que podem ser escritos como a soma de dois números primos diferentes.

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_sum_of_primes(n):
    for i in range(2, n):
        if is_prime(i) and is_prime(n - i) and i != (n - i):
            return True
    return False

numeros = [10, 15, 20, 25, 30, 35]

numeros_soma_primos = list(filter(lambda x: is_sum_of_primes(x), numeros))
print(numeros_soma_primos)

"""Função Reduce"""

